// Code generated by MockGen. DO NOT EDIT.
// Source: app.go
//
// Generated by this command:
//
//	mockgen -source app.go -destination ./mock/mock_app.go -package mock Operations
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	app "github.com/dark-vinci/wapp/backend/account/app"
	models "github.com/dark-vinci/wapp/backend/sdk/models"
	account "github.com/dark-vinci/wapp/backend/sdk/models/account"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockOperations) AddUser(ctx context.Context, groupID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, groupID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockOperationsMockRecorder) AddUser(ctx, groupID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockOperations)(nil).AddUser), ctx, groupID, userID)
}

// AddUserToChannel mocks base method.
func (m *MockOperations) AddUserToChannel(ctx context.Context, userID, channelID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToChannel", ctx, userID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToChannel indicates an expected call of AddUserToChannel.
func (mr *MockOperationsMockRecorder) AddUserToChannel(ctx, userID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToChannel", reflect.TypeOf((*MockOperations)(nil).AddUserToChannel), ctx, userID, channelID)
}

// BlockContact mocks base method.
func (m *MockOperations) BlockContact(ctx context.Context, userID, contactID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockContact", ctx, userID, contactID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockContact indicates an expected call of BlockContact.
func (mr *MockOperationsMockRecorder) BlockContact(ctx, userID, contactID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockContact", reflect.TypeOf((*MockOperations)(nil).BlockContact), ctx, userID, contactID)
}

// Consume mocks base method.
func (m *MockOperations) Consume() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Consume")
}

// Consume indicates an expected call of Consume.
func (mr *MockOperationsMockRecorder) Consume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockOperations)(nil).Consume))
}

// CreateChannel mocks base method.
func (m *MockOperations) CreateChannel(ctx context.Context, channel account.Channel) (*account.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", ctx, channel)
	ret0, _ := ret[0].(*account.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockOperationsMockRecorder) CreateChannel(ctx, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockOperations)(nil).CreateChannel), ctx, channel)
}

// CreateContact mocks base method.
func (m *MockOperations) CreateContact(ctx context.Context, contact account.Contacts) (*account.Contacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", ctx, contact)
	ret0, _ := ret[0].(*account.Contacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockOperationsMockRecorder) CreateContact(ctx, contact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockOperations)(nil).CreateContact), ctx, contact)
}

// CreateGroup mocks base method.
func (m *MockOperations) CreateGroup(ctx context.Context, group account.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockOperationsMockRecorder) CreateGroup(ctx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockOperations)(nil).CreateGroup), ctx, group)
}

// CreateUser mocks base method.
func (m *MockOperations) CreateUser(ctx context.Context, user models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockOperationsMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockOperations)(nil).CreateUser), ctx, user)
}

// DeleteChannel mocks base method.
func (m *MockOperations) DeleteChannel(ctx context.Context, channelID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", ctx, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockOperationsMockRecorder) DeleteChannel(ctx, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockOperations)(nil).DeleteChannel), ctx, channelID)
}

// DeleteContact mocks base method.
func (m *MockOperations) DeleteContact(ctx context.Context, contactID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", ctx, contactID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockOperationsMockRecorder) DeleteContact(ctx, contactID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockOperations)(nil).DeleteContact), ctx, contactID, userID)
}

// DeleteGroup mocks base method.
func (m *MockOperations) DeleteGroup(ctx context.Context, groupID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", ctx, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockOperationsMockRecorder) DeleteGroup(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockOperations)(nil).DeleteGroup), ctx, groupID)
}

// DeleteUserAccount mocks base method.
func (m *MockOperations) DeleteUserAccount(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAccount", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAccount indicates an expected call of DeleteUserAccount.
func (mr *MockOperationsMockRecorder) DeleteUserAccount(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAccount", reflect.TypeOf((*MockOperations)(nil).DeleteUserAccount), ctx, userID)
}

// GetBlockedContacts mocks base method.
func (m *MockOperations) GetBlockedContacts(ctx context.Context, userID uuid.UUID) ([]account.Contacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockedContacts", ctx, userID)
	ret0, _ := ret[0].([]account.Contacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockedContacts indicates an expected call of GetBlockedContacts.
func (mr *MockOperationsMockRecorder) GetBlockedContacts(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockedContacts", reflect.TypeOf((*MockOperations)(nil).GetBlockedContacts), ctx, userID)
}

// GetUserContacts mocks base method.
func (m *MockOperations) GetUserContacts(ctx context.Context, contactID uuid.UUID) ([]account.Contacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserContacts", ctx, contactID)
	ret0, _ := ret[0].([]account.Contacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserContacts indicates an expected call of GetUserContacts.
func (mr *MockOperationsMockRecorder) GetUserContacts(ctx, contactID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserContacts", reflect.TypeOf((*MockOperations)(nil).GetUserContacts), ctx, contactID)
}

// Login mocks base method.
func (m *MockOperations) Login(ctx context.Context, details app.LoginRequest) (*account.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, details)
	ret0, _ := ret[0].(*account.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockOperationsMockRecorder) Login(ctx, details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockOperations)(nil).Login), ctx, details)
}

// Logout mocks base method.
func (m *MockOperations) Logout(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockOperationsMockRecorder) Logout(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockOperations)(nil).Logout), ctx)
}

// MakeContactFavourite mocks base method.
func (m *MockOperations) MakeContactFavourite(ctx context.Context, contactID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeContactFavourite", ctx, contactID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeContactFavourite indicates an expected call of MakeContactFavourite.
func (mr *MockOperationsMockRecorder) MakeContactFavourite(ctx, contactID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeContactFavourite", reflect.TypeOf((*MockOperations)(nil).MakeContactFavourite), ctx, contactID, userID)
}

// Ping mocks base method.
func (m *MockOperations) Ping(ctx context.Context, message string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, message)
	ret0, _ := ret[0].(string)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockOperationsMockRecorder) Ping(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockOperations)(nil).Ping), ctx, message)
}

// Register mocks base method.
func (m *MockOperations) Register(ctx context.Context, details app.LoginRequest) (*account.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, details)
	ret0, _ := ret[0].(*account.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockOperationsMockRecorder) Register(ctx, details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockOperations)(nil).Register), ctx, details)
}

// RemoveFavouriteContact mocks base method.
func (m *MockOperations) RemoveFavouriteContact(ctx context.Context, contactID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFavouriteContact", ctx, contactID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFavouriteContact indicates an expected call of RemoveFavouriteContact.
func (mr *MockOperationsMockRecorder) RemoveFavouriteContact(ctx, contactID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavouriteContact", reflect.TypeOf((*MockOperations)(nil).RemoveFavouriteContact), ctx, contactID, userID)
}

// RemoveUserFromGroup mocks base method.
func (m *MockOperations) RemoveUserFromGroup(ctx context.Context, groupID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromGroup", ctx, groupID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromGroup indicates an expected call of RemoveUserFromGroup.
func (mr *MockOperationsMockRecorder) RemoveUserFromGroup(ctx, groupID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromGroup", reflect.TypeOf((*MockOperations)(nil).RemoveUserFromGroup), ctx, groupID, userID)
}

// Shutdown mocks base method.
func (m *MockOperations) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockOperationsMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockOperations)(nil).Shutdown))
}

// UnblockContact mocks base method.
func (m *MockOperations) UnblockContact(ctx context.Context, userID, contactID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockContact", ctx, userID, contactID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockContact indicates an expected call of UnblockContact.
func (mr *MockOperationsMockRecorder) UnblockContact(ctx, userID, contactID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockContact", reflect.TypeOf((*MockOperations)(nil).UnblockContact), ctx, userID, contactID)
}

// VerifyOTP mocks base method.
func (m *MockOperations) VerifyOTP(ctx context.Context, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", ctx, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockOperationsMockRecorder) VerifyOTP(ctx, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockOperations)(nil).VerifyOTP), ctx, otp)
}
